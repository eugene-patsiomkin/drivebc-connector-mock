openapi: '3.0.2'
info:
  title: API Profile
  version: '0.1.0'
servers:
  - url: https://api.server.test/v1
tags:
  - name: Profile
    description: Profile storage API
  - name: Schema
    description: Schema storage API
  - name: Administration
    description: Endpoints to be consumed through administration ui
paths:
  /profiles:
    get:
      tags: [Profile, Administration]
      description: Return list of profiles
      parameters:
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"
    post:
      tags: [Profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileReq"
          application/xml:
            schema:
              $ref: "#/components/schemas/ProfileReq"
      parameters:
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
            application/xml:
              schema:
                $ref: "#/components/schemas/Profile"
  /profiles/{validation_schema_name}/{owner_id}:
    get:
      tags: [Profile]
      parameters:
        - in: path
          name: validation_schema_name
          required: true
          schema:
            type: string
        - in: path
          name: owner_id
          required: true
          schema:
            type: string
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
            application/xml:
              schema:
                $ref: "#/components/schemas/Profile"
  /profiles/{id}:
    get:
      tags: [Profile]
      description: Get profile by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
            application/xml:
              schema:
                $ref: "#/components/schemas/Profile"
    put:
      tags: [Profile]
      description: Full profile update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileReq"
          application/xml:
            schema:
              $ref: "#/components/schemas/ProfileReq"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
            application/xml:
              schema:
                $ref: "#/components/schemas/Profile"
    patch:
      tags: [Profile]
      description: Partial profile update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileReq"
          application/xml:
            schema:
              $ref: "#/components/schemas/ProfileReq"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
            application/xml:
              schema:
                $ref: "#/components/schemas/Profile"
    delete:
      tags: [Profile]
      description: Partial profile update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /profiles/{validation_schema_name}:
    get:
      tags: [Profile, Administration]
      description: Return list of profiles by schema name
      parameters:
        - in: path
          name: validation_schema_name
          required: true
          schema:
            type: string
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"
  /schemas:
    get:
      tags: [Schema, Administration]
      description: Returns the list of schemas
      parameters:
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schema"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schema"
    post:
      tags: [Schema, Administration]
      description: Create new schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaReq"
          application/xml:
            schema:
              $ref: "#/components/schemas/SchemaReq"
      parameters:
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schema"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schema"
  /schemas/{validation_schema_name}:
    get:
      tags: [Schema, Administration]
      description: Returns schema by name.
      parameters:
        - in: path
          name: validation_schema_name
          required: true
          schema:
            type: string
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schema"
            application/xml:
              schema:
                $ref: "#/components/schemas/Schema"
    put:
      tags: [Schema, Administration]
      description: Migrate schema. Might not be that easy might require profile updates.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaReq"
          application/xml:
            schema:
              $ref: "#/components/schemas/SchemaReq"
      parameters:
        - in: path
          name: validation_schema_name
          required: true
          schema:
            type: string
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schema"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schema"
    delete:
      tags: [Schema, Administration]
      description: Delete schema. Can only be done if there are no linked profiles
      parameters:
        - in: path
          name: validation_schema_name
          required: true
          schema:
            type: string
        - in: header
          name: application_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
components:
  schemas:
    ProfileReq:
      type: object
      properties:
        validation_schema_name:
          type: string
          description: URI safe string 
          example: color_choice_profile.v1
        owner_id:
          type: string
          description: Owner id as defined by application
        profile:
          type: string
          description: JSON string for a profile.
          example: '{"str_property":"value1","bool_property":true,"obj_property":{},"array_property":[]}'
      required: [validation_schema_name, owner_id, profile]
    Profile:
      type: object
      allOf:
        - $ref: "#/components/schemas/ProfileReq"
      properties:
        id:
          type: string
          description: uuid
    SchemaReq:
      type: object
      properties:
        name:
          type: string
          example: color_choice_profile.v1
        schema:
          type: string
          description: Valid json schema json-schema.org. Reference can be found https://json-schema.org/understanding-json-schema/reference/index.html
          example: 'Check https://json-schema.org/learn/miscellaneous-examples.html for examples'
        description:
          type: string
          description: Schema description
      required: [name, schema]
    Schema:
      type: object
      allOf:
        - $ref: "#/components/schemas/SchemaReq"
      properties:
        id:
          type: string
          description: uuid