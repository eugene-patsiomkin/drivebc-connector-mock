version: '3.7'

volumes:
  kong_data: {}
  mongodbdata: {}

networks:
  kong-net:
    external: false

services:
  # API image
  api:
    container_name: sample_api_app
    image: moti/sample-api-nodejs:v1
    build: ./api
    networks: 
      - kong-net

  moti-events:
    container_name: event_api_app
    image: moti/events-api-nodejs:v1
    build: ./events-endpoint-api
    networks: 
      - kong-net
    depends_on:
      - mongodb
      - moti-geostore
    environment:
      - MOTI_API_MONGO_DB_HOST=mongodb
      - MOTI_API_EVENTS_PORT=8080
      - MOTI_API_GEOSTORE_HOST=moti-geostore:8080
      - MOTI_ZIPKIN_HOST=zipkin
  moti-images:
    container_name: images_api_app
    image: moti/images-api-nodejs:v1
    build: ./images-endpoint-api
    networks: 
      - kong-net
    depends_on:
      - mongodb
      - moti-geostore
    environment:
      - MOTI_API_MONGO_DB_HOST=mongodb
      - MOTI_API_IMAGES_PORT=8080      
      - MOTI_API_GEOSTORE_HOST=moti-geostore:8080
      - MOTI_ZIPKIN_HOST=zipkin
  moti-geostore:
    container_name: geostore_api_app
    image: moti/geostore-api-nodejs:v1
    build: ./geostore-endpoint-api
    networks: 
      - kong-net
    depends_on:
      - mongodb
    environment:
      - MOTI_API_MONGO_DB_HOST=mongodb
      - MOTI_API_GEOSTORE_PORT=8080      
      - MOTI_ZIPKIN_HOST=zipkin
  moti-profiles:
    container_name: profiles_api_app
    image: moti/profiles-api-nodejs:v1
    build: ./profile-endpoint-api
    networks: 
      - kong-net
    depends_on:
      - mongodb
    environment:
      - MOTI_API_MONGO_DB_HOST=mongodb
      - MOTI_API_PROFILES_PORT=8080
      - MOTI_ZIPKIN_HOST=zipkin
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    container_name: moti-api-gateway-kong.v1
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "8443:8443/tcp"
      - "127.0.0.1:9444:9444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  mongodb:
    image: mongo:4.4
    container_name: moti-mongo-db
    environment:
      - MONGO_INITDB_DATABASE=event-db
      - MONGO_INITDB_ROOT_USERNAME=eventroot
      - MONGO_INITDB_ROOT_PASSWORD=eventpassword
    networks:
      - kong-net
    volumes:
      - mongodbdata:/var/lib/mongodb/data
      - ./mongodb-users.js:/docker-entrypoint-initdb.d/01-users.js:ro
      - ./mongodb-seed-data.js:/docker-entrypoint-initdb.d/02-seed-data.js:ro
    ports:
      - '27017-27019:27017-27019'
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
  db:
    container_name: api_middleware_db_postgres
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

  storage:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1    
    networks: 
      - kong-net    

    # Uncomment to expose the storage port for testing
    ports:
      - 9200:9200

  # Use Elasticsearch instead of in-memory storage
  zipkin:
    image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}
    container_name: zipkin
    environment:
      - STORAGE_TYPE=elasticsearch
      # Point the zipkin at the storage backend
      - ES_HOSTS=storage:9200
      # Uncomment to see requests to and from elasticsearch
      # - ES_HTTP_LOGGING=BODY
    depends_on:
      - storage
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - 9411:9411
    networks: 
      - kong-net

  dependencies:
    image: ghcr.io/openzipkin/zipkin-dependencies
    container_name: dependencies
    entrypoint: crond -f
    environment:
      - STORAGE_TYPE=elasticsearch
      - ES_HOSTS=storage:9200
    depends_on:
      - storage
    networks: 
      - kong-net



secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD